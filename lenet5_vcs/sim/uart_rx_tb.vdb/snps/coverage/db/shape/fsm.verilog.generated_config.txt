// Synopsys, Inc.
// User: ICer
// Date: Tue May 28 12:13:56 2024

// ==================================================================================================
// This config file prototype is produced from the last run using the complete list of extracted fsms.
// Please note that by providing your own description of the module you are enforcing what will be
// extracted for that module.
// Copy this file to your source directory and edit it as described below,
// then pass the file to VCS using the -cm_fsmcfg command line option.
// FSMs will be extracted normally for any module not mentioned in this file
// ==================================================================================================
// 1. For every module that you want to specify yourself, use:
//      MODULE==name
//    -----------------------------------------------------
//    The following options are defining the behavior on the module level.
//    -----------------------------------------------------
//    1.1  You can control what fsms should be used within this module:
//            FSMS=AUTO
//            this means that you want VCS to automatically extract all
//            detectable FSMs from this module.
//            -----------------------------------------------------
//            FSMS=EXCLUDE
//            this means that you want all fsms except the ones from the list that follows
//            if the list is empty, all fsms will be extracted for this module
//            -----------------------------------------------------
//            FSMS=RESTRICT
//            this means that you want only the fsms from the list that follows
//            if the list is empty, no fsms will be extracted for this module
//            -----------------------------------------------------
//         If none of these options are specified, the program will assume FSMS=RESTRICT
//         -----------------------------------------------------
//     1.2 You can specify that the state with the minimal value should be used as a
//         start state for all sequences in every fsm in the module.
//            FSMS=START_STATE_DFLT
//         For any particular fsm you can overwrite this behavior inside its description.
//    -----------------------------------------------------
// 2. Each fsm description in the list of fsms should be specified as follows:
//      2.1 provide the current state variable declaration:
//          CURRENT= name of the current state variable
//      -----------------------------------------------------
//      2.2 if next state variable is different from the current state provide:
//          NEXT= next state variable
//          if you don't use NEXT=, the program will assume that CURRENT and NEXT are the same
//      -----------------------------------------------------
//      2.3 if you want to provide the restrictive the list of states, provide:
//          STATES= s0,s1 etc. where s0 is either a name or a value of the state
//          if you don't use STATES=, the program will assume that you want to use all states
//      -----------------------------------------------------
//      2.4 if you want to ignore some states, specify them in the following list:
//          STATES_X= s0,s1, etc.
//      -----------------------------------------------------
//      2.5 if you want to mark, that some states should never be reached, specify them as a list:
//          STATES_NEVER= s0,s1, etc.
//      -----------------------------------------------------
//      2.6 similar to the STATES, if you want to provide the restrictive the list of transitions, specify:
//          TRANSITIONS= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.7 similar to the STATES_X, if you want to ignore some transitions, specify them in the following list:
//          TRANSITIONS_X= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.8 similar to the STATES_NEVER,if you want to mark, that some transitions should never occur,
//          specify them as a list:
//          TRANSITIONS_NEVER= s0->s1,s1->s2,     etc.
//      -----------------------------------------------------
//      2.9 if you want to specify the start state use:
//          START_STATE= s0
//      -----------------------------------------------------
//      Please note:
//          - that a state in every list can be specified either by name or by value.
//          - in specifying the transitions you can use * in order to refer to 'any' state.
// ==================================================================================================
// Uncomment and modify the following 2 line to override default FSM sequence limits for all FSMs in the design.
//SEQ_NUMBER_MAX=10000
//SEQ_LENGTH_MAX=32

MODULE=convPool1
CURRENT=state
NEXT=next_state
STATES=S_CONVOLUTE,S_IDLE,S_LOAD_M,S_LOAD_WB,S_STORE_RES
TRANSITIONS=S_CONVOLUTE->S_IDLE,
S_CONVOLUTE->S_LOAD_M,
S_CONVOLUTE->S_STORE_RES,
S_IDLE->S_LOAD_WB,
S_LOAD_M->S_CONVOLUTE,
S_LOAD_M->S_IDLE,
S_LOAD_WB->S_IDLE,
S_LOAD_WB->S_LOAD_M,
S_STORE_RES->S_IDLE,
S_STORE_RES->S_LOAD_WB
MODULE=convPool2
CURRENT=state
NEXT=next_state
STATES=S_CONVOLUTE,S_IDLE,S_LOAD_BIA,S_LOAD_M,S_LOAD_W,S_RELU_POOL
TRANSITIONS=S_CONVOLUTE->S_IDLE,
S_CONVOLUTE->S_LOAD_M,
S_CONVOLUTE->S_LOAD_W,
S_CONVOLUTE->S_RELU_POOL,
S_IDLE->S_LOAD_BIA,
S_LOAD_BIA->S_IDLE,
S_LOAD_BIA->S_LOAD_W,
S_LOAD_M->S_CONVOLUTE,
S_LOAD_M->S_IDLE,
S_LOAD_W->S_IDLE,
S_LOAD_W->S_LOAD_M,
S_RELU_POOL->S_IDLE,
S_RELU_POOL->S_LOAD_BIA
MODULE=rx_buffer
CURRENT=cur_st
NEXT=nxt_st
STATES=IDLE,SEND,SPLICE,'h0
TRANSITIONS=IDLE->'h0,
IDLE->SPLICE,
SEND->'h0,
SEND->IDLE,
SPLICE->'h0,
SPLICE->SEND,
'h0->IDLE
MODULE=data_load_ctrl
CURRENT=state
NEXT=next_state
STATES=FINISH,IDLE,READ
TRANSITIONS=FINISH->IDLE,
IDLE->READ,
READ->FINISH,
READ->IDLE
MODULE=lenetTop
CURRENT=state
NEXT=next_state
STATES=S_CONV_1,S_CONV_2,S_FC,S_IDLE
TRANSITIONS=S_CONV_1->S_CONV_2,
S_CONV_1->S_IDLE,
S_CONV_2->S_FC,
S_CONV_2->S_IDLE,
S_FC->S_IDLE,
S_IDLE->S_CONV_1
MODULE=fc
CURRENT=state
NEXT=next_state
STATES=S_CLASSIFY,S_FC,S_IDLE,S_LOAD_WB
TRANSITIONS=S_CLASSIFY->S_IDLE,
S_FC->S_CLASSIFY,
S_FC->S_IDLE,
S_FC->S_LOAD_WB,
S_IDLE->S_LOAD_WB,
S_LOAD_WB->S_FC,
S_LOAD_WB->S_IDLE
MODULE=controler
CURRENT=state
NEXT=next_state
STATES=S_INIT,S_LENET,S_LOAD_UART
TRANSITIONS=S_INIT->S_LOAD_UART,
S_LENET->S_INIT,
S_LENET->S_LOAD_UART,
S_LOAD_UART->S_INIT,
S_LOAD_UART->S_LENET
MODULE=tx_buffer
CURRENT=cur_st
NEXT=nxt_st
STATES=IDLE,RECEIVE,SEND,WAIT,'h0
TRANSITIONS=IDLE->'h0,
IDLE->RECEIVE,
RECEIVE->'h0,
RECEIVE->SEND,
SEND->'h0,
SEND->WAIT,
WAIT->'h0,
WAIT->IDLE,
WAIT->SEND,
'h0->IDLE
